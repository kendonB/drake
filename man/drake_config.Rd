% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/config.R
\name{drake_config}
\alias{drake_config}
\title{Function drake_config}
\usage{
drake_config(plan = workplan(), targets = drake::possible_targets(plan),
  envir = parent.frame(), verbose = TRUE, hook = default_hook,
  cache = drake::get_cache(verbose = verbose, force = force),
  parallelism = drake::default_parallelism(), jobs = 1,
  packages = rev(.packages()), prework = character(0),
  prepend = character(0), command = drake::default_Makefile_command(),
  args = drake::default_Makefile_args(jobs = jobs, verbose = verbose),
  recipe_command = drake::default_recipe_command(), timeout = Inf,
  cpu = timeout, elapsed = timeout, retries = 0, force = FALSE,
  clear_progress = FALSE, graph = NULL, trigger = "any",
  imports_only = FALSE, skip_imports = FALSE, skip_safety_checks = FALSE)
}
\arguments{
\item{plan}{same as for \code{\link{make}}}

\item{targets}{same as for \code{\link{make}}}

\item{envir}{same as for \code{\link{make}}}

\item{verbose}{same as for \code{\link{make}}}

\item{hook}{same as for \code{\link{make}}}

\item{cache}{same as for \code{\link{make}}}

\item{parallelism}{same as for \code{\link{make}}}

\item{jobs}{same as for \code{\link{make}}}

\item{packages}{same as for \code{\link{make}}}

\item{prework}{same as for \code{\link{make}}}

\item{prepend}{same as for \code{\link{make}}}

\item{command}{same as for \code{\link{make}}}

\item{args}{same as for \code{\link{make}}}

\item{recipe_command}{same as for \code{\link{make}}}

\item{timeout}{same as for \code{\link{make}}}

\item{cpu}{same as for \code{\link{make}}}

\item{elapsed}{same as for \code{\link{make}}}

\item{retries}{same as for \code{\link{make}}}

\item{force}{same as for \code{\link{make}}}

\item{clear_progress}{logical, whether to clear
the cached progress of the targets readable by}

\item{graph}{igraph object representing the workflow plan network.
Overrides \code{skip_imports}.}

\item{trigger}{same as for \code{\link{make}}}

\item{imports_only}{logical, whether to skip building the targets
in \code{plan} and just import objects and files.}

\item{skip_imports}{logical, whether to totally neglect to
process the imports and jump straight to the targets. This can be useful
if your imports are massive and you just want to test your project,
but it is bad practice for reproducible data analysis.
This argument is overridden if you supply your own \code{graph} argument.}

\item{skip_safety_checks}{logical, whether to skip the safety checks
on your workflow to save time. Use at your own peril.}
}
\value{
The master internal configuration list of a project.
}
\description{
Compute the internal runtime parameter list of
\code{\link{make}()}. This could save time if you are planning
multiple function calls of functions like \code{\link{outdated}()}
or \code{\link{vis_drake_graph}()}. Drake needs to import and cache files
and objects to compute the configuration list, which in turn
supports user-side functions to help with visualization and parallelism.
The result differs from
\code{\link{make}(..., imports_only = TRUE)}
in that the graph includes both the targets and the imports,
not just the imports.
}
\examples{
\dontrun{
load_basic_example() # Load drake's canonical example.
# Construct the master internal configuration list.
con <- drake_config(my_plan)
# These functions are faster than otherwise
# because they use the configuration list.
outdated(config = con) # Which targets are out of date?
missed(config = con) # Which imports are missing?
# In make(..., jobs = n), it would be silly to set `n` higher than this:
max_useful_jobs(config = con)
# Show a visNetwork graph
vis_drake_graph(config = con)
# Get the underlying node/edge data frames of the graph.
dataframes_graph(config = con)
}
}
\seealso{
\code{\link{make_with_config}}, \code{\link{make}},
\code{\link{workplan}}, \code{\link{vis_drake_graph}}
}
